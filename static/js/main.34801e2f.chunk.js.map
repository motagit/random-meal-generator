{"version":3,"sources":["App.js","index.js"],"names":["App","useState","isLoading","setLoading","data","setData","console","log","getMeals","a","fetch","response","json","meals","error","getIngredients","ingredientArray","i","ingredient","String","trimEnd","push","class","id","onClick","className","strMeal","src","strMealThumb","alt","instructionArray","match","split","getInstructions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAqEeA,MAlEf,WACE,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACAC,QAAQC,IAAIL,GAEZ,IAAMM,EAAQ,uCAAG,8BAAAC,EAAA,+EAEUC,MACrB,sDAHW,cAEPC,EAFO,gBAKMA,EAASC,OALf,OAKPA,EALO,OAMbP,EAAQO,EAAKC,OANA,kDAQbP,QAAQQ,MAAR,MARa,yBAUbX,GAAW,GACXY,IAXa,6EAAH,qDAeRA,EAAiB,WACrB,IAAIC,EAAkB,GACtB,GAAiB,GAAbd,EACF,IAAK,IAAIe,EAAI,EAAGA,GAAK,GAAIA,IACvB,GAAsC,IAAjCb,EAAK,GAAG,gBAAkBa,IAA6C,MAAhCb,EAAK,GAAG,gBAAkBa,GAAY,CAChF,IAAIC,EAAaC,OAAOf,EAAK,GAAG,aAAea,GAAGG,UAAY,IAAMhB,EAAK,GAAG,gBAAkBa,IAC9FD,EAAgBK,KAAK,6BAAaH,GAAJD,IAIpC,OAAQD,GAaV,OACE,qCACA,wBAAQM,MAAoB,GAAbpB,EAAqB,YAAc,iBAAkBqB,GAAG,aAAaC,QAAS,kBAAMhB,KAAnG,sBACc,GAAbN,EACC,sBAAKuB,UAAU,YAAf,UACI,6BAAKrB,EAAK,GAAGsB,UACb,sBAAKD,UAAU,SAAf,UACE,qBAAKF,GAAG,QAAQI,IAAKvB,EAAK,GAAGwB,aAAcC,IAAI,eAC/C,sBAAKJ,UAAU,cAAf,UACE,6CACE,6BAAKV,YAGT,sBAAKU,UAAU,sBAAf,UACE,8CACA,4BAzBY,WACtB,IAAIK,EAAmB,GAMvB,OALiB,GAAb5B,GACEE,EAAK,GAAL,gBAA2B2B,MAAM,SACnCD,EAAmB1B,EAAK,GAAL,gBAA2B4B,SAG1CF,EAkBMG,WAGZ,SC5DNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.34801e2f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.scss';\n\nfunction App() {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n  console.log(isLoading);\n\n  const getMeals = async () => {\n    try {\n      const response = await fetch(\n        \"https://www.themealdb.com/api/json/v1/1/random.php\"\n      );\n      const json = await response.json();\n      setData(json.meals);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n      getIngredients();\n    }\n  };\n\n  const getIngredients = () => {\n    var ingredientArray = [];\n    if (isLoading == false) {\n      for (var i = 1; i <= 20; i++) {\n        if ((data[0]['strIngredient' + i]) != \"\" && data[0]['strIngredient' + i] != null) {\n          let ingredient = String(data[0]['strMeasure' + i].trimEnd() + \" \" + data[0]['strIngredient' + i]);\n          ingredientArray.push(<li key={i}>{ingredient}</li>);\n        }\n      }\n    }\n    return (ingredientArray);\n  }\n\n  const getInstructions = () => {\n    var instructionArray = [];\n    if (isLoading == false) {\n      if (data[0]['strInstructions'].match(/\\n/g)) {\n        instructionArray = data[0]['strInstructions'].split();\n      }\n    }\n    return (instructionArray);\n  }\n\n  return (\n    <>\n    <button class={isLoading == false ? \"topButton\" : \"centeredButton\"} id=\"mainButton\" onClick={() => getMeals()}>get meal</button> \n    {isLoading == false ? \n      <div className=\"container\">\n          <h1>{data[0].strMeal}</h1>\n          <div className=\"column\">\n            <img id=\"image\" src={data[0].strMealThumb} alt=\"Food image\"/>\n            <div className=\"ingredients\">\n              <h3>Ingredients</h3>\n                <ul>{getIngredients()}</ul>\n            </div>\n            </div>\n            <div className=\"instructions column\">\n              <h3>Instructions</h3>\n              <p>{getInstructions()}</p>\n            </div>\n      </div>\n    : null}\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}